// Generated by CoffeeScript 1.9.1

/**
 * A resource represents a file or directory in the store
 */

(function() {
  var Author, Change, Resource, Revision, Store,
    slice = [].slice;

  Resource = (function() {
    function Resource(path1, contents1, latest) {
      this.path = path1;
      this.contents = contents1 != null ? contents1 : null;
      this.latest = latest != null ? latest : null;
    }

    Resource.prototype.getContents = function(store, cb) {
      return this.contents || store.read(this.path, cb);
    };

    Resource.prototype.getLatest = function(store, cb) {
      return this.latest || store.latest(this.path, cb);
    };

    return Resource;

  })();


  /**
   * Describes the author of a revision
   */

  Author = (function() {

    /**
    	 * @constructor
    	 * @param  {String} name
    	 * @param  {String} email
     */
    function Author(name, email) {
      this.name = name;
      this.email = email;

      /**
      		 * @property {String} name Name of the author
       */

      /**
      		 * @property {String} email Email address of the author
       */
    }


    /**
    	 * Returns a git-style string representation of the author: `name <email>`
    	 * @return {String}
     */

    Author.prototype.toString = function() {
      return this.name + " <" + this.email + ">";
    };

    return Author;

  })();

  Change = (function() {
    function Change(added, deleted, modified) {
      this.added = added;
      this.deleted = deleted;
      this.modified = modified;
    }

    return Change;

  })();


  /**
   * @class  Revision
   * Represents a single revision in the history of a file
   */

  Revision = (function() {
    function Revision(path1, id1, time, author1, message1, changes) {
      this.path = path1;
      this.id = id1;
      this.time = time;
      this.author = author1;
      this.message = message1;
      this.changes = changes;
    }

    Revision.prototype.getContents = function(store) {};

    return Revision;

  })();

  Store = (function() {
    function Store(options, callback) {}

    Store.prototype.save = function(path, contents, author, message, callback) {};

    Store.prototype.read = function(path, id, callback) {};

    Store.prototype.retrieve = function(id, callback) {};

    Store.prototype.remove = function(path, callback) {};

    Store.prototype.move = function(fromPath, toPath) {};

    Store.prototype.list = function(directory) {};

    Store.prototype.search = function(pattern) {};

    Store.create = function() {
      var args, cls, engine;
      engine = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      cls = Store.engines[engine];
      if (cls != null) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(cls, args, function(){});
      } else {
        throw new Error("Unknown engine `" + engine + "`");
      }
    };

    Store.engines = {
      git: require('./git')
    };

    return Store;

  })();

  module.exports = {
    Store: Store,
    Author: Author,
    Change: Change,
    Resource: Resource,
    Revision: Revision
  };

}).call(this);
